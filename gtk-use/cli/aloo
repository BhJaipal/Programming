#!/home/jaipal001/.bun/bin/bun

/// <reference types="node" />

import { exec } from "child_process";
import { existsSync, mkdirSync } from "fs";

let { writeFileSync } = require("fs");
let { argv } = require("process");

function createGtkApp(project?: string | null) {
	if (!project) {
		project = prompt("Enter Project Name: ", "aloo-project");
	}
	if (!project) return;
	if (existsSync(project)) {
		throw "Project Already Exists";
	}
	let appName = prompt("Enter App Name: ", "Example App");

	mkdirSync(project);
	mkdirSync(`${project}/src`);
	mkdirSync(`${project}/test`);
	let content = `#include "aloo.h"
AlooApplication *app;

static void activate() {
	alooWidget *label = Label.new("Hello World!");
	alooWidget *win = Window.new(app);
	Window.setChild(win, label);
	Window.setSize(win, 400, 300);
	Window.setTitle(win, "${appName}");
	Window.show(win);
	Window.present(win);
	Window.set_app_window(win, app);
}

int main(int argc, char *argv[]) {
	struct alooAppOptions opts = NONE_FLAGS_OPTIONS(argc, argv);
	app = Application.create("com.example.hello", opts);
	Application.add_event_listener(app, "activate", activate);
	int status = Application.run(app);
	Application.unref(app);
	return 0;
}`;

	writeFileSync(project + "/src/main.c", content);

	let cmake = `cmake_minimum_required(VERSION 3.30)

project(${project})

add_executable(run.exe src/main.c)
set(CMAKE_BINARY_DIR build/)
set(EXECUTABLE_OUTPUT_PATH \${CMAKE_SOURCE_DIR}/bin/)

target_link_libraries(run.exe ${argv[1].split("/cli/aloo")[0]}/lib/libaloo.a)

include_directories(
	"${argv[1].split("/cli/aloo")[0] + "/include"}"
	"/usr/include/gtk-4.0"
	"/usr/include/glib-2.0"
	"/usr/include/glib-2.0/gobject"
	"/usr/include/gdk-pixbuf-2.0"
	"/usr/lib/x86_64-linux-gnu/glib-2.0/include"
	"/usr/include/gtk-4.0/gdk"
	"/usr/include/cairo"
	"/usr/lib/x86_64-linux-gnu/graphene-1.0/include"
	"/usr/include/pango-1.0"
	"/usr/include/graphene-1.0"
	"/usr/include/harfbuzz"
	)
target_link_libraries(run.exe
	"/lib/x86_64-linux-gnu/libgtk-4.so"
	"/lib/x86_64-linux-gnu/libgtk-4.so.1"
	"/lib/x86_64-linux-gnu/libglib-2.0.so.0"
	"/lib/x86_64-linux-gnu/libglib-2.0.so"
	"/lib/x86_64-linux-gnu/libgobject-2.0.so.0"
	"/lib/x86_64-linux-gnu/libgobject-2.0.so"
	"/lib/x86_64-linux-gnu/libgobject-2.0.so"
	"/lib/x86_64-linux-gnu/libgio-2.0.so"
	"/lib/x86_64-linux-gnu/libgio-2.0.so.0"
)`;
	writeFileSync(project + "/CMakeLists.txt", cmake);
	while (cmake.includes("(run.exe")) {
		cmake = cmake.replace("(run.exe", "(test-run.exe");
	}
	cmake = cmake.replace("src/main.c", "main.c");
	cmake = cmake.replace("/bin", "/../bin");
	writeFileSync(project + "/test/CMakeLists.txt", cmake);
	writeFileSync(
		project + "/test/main.c",
		`#include <stdio.h>

int main() {
	printf("Hello, World!\\n");
	return 0;
}`
	);
	writeFileSync(
		project + "/aloo.json",
		JSON.stringify({ project, app: appName })
	);
}

function help() {
	console.log("\t\t\t\t\t\t\t\t\tALOO CLI");
	console.log(
		"\t\t\taloo create-app <name>\t\t\t\t\tCreates C Aloo app template\n"
	);
	console.log("\t\t\taloo run\t\t\t\t\t\t\t\tRuns Aloo app\n");
	console.log("\t\t\taloo test\t\t\t\t\t\t\t\tRuns Aloo app tests\n");
}

if (argv.length > 2) {
	let command = argv[2];

	switch (command) {
		case "create-app":
			createGtkApp(argv[3]);
			break;
		case "run":
			exec(
				`cmake -S . -B build && cd build && make all && cd .. && ./bin/run.exe`,
				(error, stdout, stderr) => {
					if (error) {
						console.log(`error: ${error.message}`);
						return;
					}
					if (stderr) {
						console.log(`stderr: ${stderr}`);
						return;
					}
					console.log(`success: ${stdout}`);
				}
			);
			break;
		case "test":
			exec(
				`cd test && cmake -S . -B build && cd build && make all && cd ../../ && clear && ./bin/test-run.exe`,
				(error, stdout, stderr) => {
					if (error) {
						console.log(`error: ${error.message}`);
						return;
					}
					if (stderr) {
						console.log(`stderr: ${stderr}`);
						return;
					}
					console.log(`success: ${stdout}`);
				}
			);
			break;
		default:
			help();
			break;
	}
} else {
	help();
}
